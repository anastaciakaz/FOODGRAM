# .github/workflows/**foodgram_workflow.yml**
name: foodgram_workflow

on: [push]


jobs:
    tests:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
  
      - name: Install dependencies
        run: | 
          python -m pip install --upgrade pip 
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt 
  
      - name: Test with flake8
        run: |
          flake8 --ignore=E501 backend/foodgram/settings/
          flake8 --ignore=E501 backend/recipe/migrations/
          flake --ignore=E501 backend/users/migrations/
          python -m flake8 backend

    build_and_push_backend_to_docker_hub:        
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest    
      needs: tests
      steps:
          - name: Check out the repo
            uses: actions/checkout@v2
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
          - name: Login to Docker
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
          - name: Push to Docker Hub
            uses: docker/build-push-action@v2
            with:
              context: ./backend
              push: true
              tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_back:latest
    
    build_and_push_frontend_to_docker_hub:
        name: Push frontend image to Docker Hub
        runs-on: ubuntu-latest
        needs:
           - tests
        steps:
        - name: Check out the repo
          uses: actions/checkout@v2
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
        - name: Login to Docker
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Push to Docker Hub
          uses: docker/build-push-action@v2
          with:
            context: ./frontend
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_front:latest
    
    deploy:
        name: Deploy on remote server
        runs-on: ubuntu-latest
        needs:
          - build_and_push_backend_to_docker_hub
          - build_and_push_frontend_to_docker_hub
        if: github.ref == 'refs/heads/master'
        steps:
          - name: executing remote ssh commands to deploy
            uses: appleboy/ssh-action@master
            with:
              host: ${{ secrets.HOST }}
              username: ${{ secrets.USER }}
              key: ${{ secrets.SSH_KEY }}
              passphrase: ${{ secrets.PASSPHRASE }}
              script: |
                cd infa
                sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_back:latest
                sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_front:latest
                sudo docker-compose stop
                sudo docker-compose rm backend
                touch .env
                sudo echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
                sudo echo DEBUG =${{ SECRETS.DEBUG_VAR_F }}
                sudo echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
                sudo echo DB_NAME=${{ secrets.DB_NAME }} >> .env
                sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
                sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
                sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
                sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
                sudo docker-compose up -d --build
    send_message:
      name: Send Telegram message
      runs-on: ubuntu-latest
      needs: deploy
      steps:
        - name: Send message
          uses: appleboy/telegram-action@master
          with:
            to: ${{ secrets.TELEGRAM_TO }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            message: ${{ github.workflow }} успешно выполнен!
